{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/danny/SEI-412/unit-3/codealongs/mern-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\n// Imports\nimport React, { Component, useEffect, useState } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken'; // CSS\n\nimport './App.css'; // Components\n\nimport Welcome from './components/Welcome';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Profile from './components/Profile';\nimport Signup from './components/Signup';\nimport Login from './components/Login';\nimport About from './components/About'; //Private route component\n// private route for  <PrivateRoute path='/profile' component={ Profile} user={currentUser} handleLogout={handleLogout} />\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  console.log('This is a private route...'); //grab the token\n\n  let user = localStorage.getItem('jwtToken'); //to check to see if ther is a user inside the loalStorage\n  //     // {...rest} = for any information that ccomes in\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      return user ? /*#__PURE__*/_jsxDEV(Component, { ...rest,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 58\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n};\n\n_c = PrivateRoute;\n\nfunction App() {\n  _s();\n\n  // Set state values\n  const [currentUser, setCurrentUser] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(true); //useEffect to handle and store the token of the user\n\n  useEffect(() => {\n    let token; //if ther is no token inide localStorage, then the user is not authenticated\n    /// Now grab token with getItem at the localStorage\n\n    if (!localStorage.getItem('jwtToken')) {\n      console.log('is not authenticated');\n      setIsAuthenticated(false);\n    } else {\n      token = jwt_decode(localStorage.getItem('jwtToken'));\n      console.log('token', token);\n      setAuthToken(token);\n      setCurrentUser(token);\n    }\n  }, []);\n\n  const nowCurrentUser = userData => {\n    console.log('----- inside nowCurrentUser -----');\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n  }; // Now let'ss create a logout\n\n\n  const handleLogout = () => {\n    // determine if thereis ajwt\n    /// if there is a token, then rmove it launch a logout\n    if (localStorage.getItem('jwtToten')) {\n      localStorage.removeItem('jwtToken'); //now set the user to null\n\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      isAuth: isAuthenticated,\n      handleLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-5\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          component: Signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          render: props => /*#__PURE__*/_jsxDEV(Login, { ...props,\n            user: currentUser,\n            nowCurrentUser: nowCurrentUser,\n            setIsAuthenticated: setIsAuthenticated\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/about\",\n          component: About\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: Welcome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n          path: \"/profile\",\n          component: Profile,\n          user: currentUser,\n          handleLogout: handleLogout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Wxrx26qankluQDWwi1kFBjyVj10=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PrivateRoute\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/danny/SEI-412/unit-3/codealongs/mern-frontend/src/App.js"],"names":["React","Component","useEffect","useState","Route","Switch","Redirect","jwt_decode","setAuthToken","Welcome","Navbar","Footer","Profile","Signup","Login","About","PrivateRoute","component","rest","console","log","user","localStorage","getItem","props","App","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","token","nowCurrentUser","userData","handleLogout","removeItem"],"mappings":"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","sourcesContent":["// Imports\nimport React, { Component, useEffect, useState } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from './utils/setAuthToken';\n// CSS\nimport './App.css';\n// Components\nimport Welcome from './components/Welcome';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Profile from './components/Profile';\nimport Signup from './components/Signup';\nimport Login from './components/Login';\nimport About from './components/About';\n\n//Private route component\n// private route for  <PrivateRoute path='/profile' component={ Profile} user={currentUser} handleLogout={handleLogout} />\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  console.log('This is a private route...')\n  //grab the token\n  let user = localStorage.getItem('jwtToken');\n\n   //to check to see if ther is a user inside the loalStorage\n//     // {...rest} = for any information that ccomes in\n  return <Route {...rest} render={ (props) => {\n      return user ? <Component {...rest} {...props} /> : <Redirect to='/login' />\n  }}/>\n}\n\n\n\nfunction App() {\n  // Set state values\n  const [currentUser, setCurrentUser] = useState('')\n  const [isAuthenticated, setIsAuthenticated] = useState(true)\n\n  //useEffect to handle and store the token of the user\n  useEffect(() => {\n  let token; \n  //if ther is no token inide localStorage, then the user is not authenticated\n  /// Now grab token with getItem at the localStorage\n  if(!localStorage.getItem('jwtToken')){\n    console.log('is not authenticated')\n    setIsAuthenticated(false)\n  }else {\n   token =jwt_decode(localStorage.getItem('jwtToken'));\n   console.log('token', token)\n   setAuthToken(token) \n   setCurrentUser(token);\n  }\n  }, []);\n\n  const nowCurrentUser = userData => {\n    console.log('----- inside nowCurrentUser -----')\n    setCurrentUser(userData);\n    setIsAuthenticated(true);\n  }\n\n  // Now let'ss create a logout\n  const handleLogout = () => {\n    // determine if thereis ajwt\n    /// if there is a token, then rmove it launch a logout\n    if (localStorage.getItem('jwtToten')) {\n      localStorage.removeItem('jwtToken')\n      //now set the user to null\n      setCurrentUser(null);\n      setIsAuthenticated(false)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {/* isAuth is located on the Navbar.js at the components */}\n      <Navbar  isAuth={isAuthenticated} handleLogout={handleLogout} />\n      <div className=\"container mt-5\" >\n        <Switch>\n          {/* routes will go inside of here */}\n          <Route path='/signup' component={ Signup } />\n          {/* if props is used we have to use the render methode */}\n          <Route path='/login' \n          render={(props) => <Login {...props} user={currentUser} nowCurrentUser={nowCurrentUser} setIsAuthenticated={setIsAuthenticated} />} />\n          {/* now the path for About route */}\n          <Route  path='/about' component={ About} />\n          <Route exact path='/' component={ Welcome } />\n          <PrivateRoute path='/profile' component={ Profile} user={currentUser} handleLogout={handleLogout} />\n        </Switch>\n\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}